import { NextResponse } from "next/server";
import { createServerSupabase } from "@/lib/supabaseServer";
import { supabaseAdmin } from "@/lib/supabaseAdmin";
import { POST as createDraft } from "../drafts/route";

export async function POST(req: Request) {
  const supa = createServerSupabase();
  const { data: { user } } = await supa.auth.getUser();
  if (!user) return NextResponse.redirect("/sign-in", { status: 303 });

  const form = await req.formData();
  const template = String(form.get("template") || "NDA");
  const partyA = String(form.get("party_a") || "");
  const partyB = String(form.get("party_b") || "");
  const jurisdiction = String(form.get("jurisdiction") || "");
  const effective = String(form.get("effective_date") || "");
  const notes = String(form.get("notes") || "");

  let content = "";
  const title = `${template}`;

  if (process.env.OPENAI_API_KEY) {
    const OpenAI = (await import("openai")).default;
    const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    const prompt = `
Generate a clean, well-formatted ${template} with tidy legal formatting.
Inputs:
- Party A: ${partyA}
- Party B: ${partyB}
- Jurisdiction: ${jurisdiction}
- Effective date: ${effective}
- Notes: ${notes}

Use numbered clauses and short paragraphs. No purple prose.`;
    const chat = await client.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.2,
    });
    content = chat.choices[0]?.message?.content || "";
  } else {
    // Fallback template (no API key)
    content =
`This ${template} (“Agreement”) is made between ${partyA || "[Party A]"} and ${partyB || "[Party B]"}, effective ${effective || "[Date]"}.
1. Purpose. …
2. Confidentiality. …
3. Term & Termination. …
4. Governing Law. ${jurisdiction || "[Jurisdiction]"}.
[This draft was generated by a fallback template. Set OPENAI_API_KEY for AI drafting.]`;
  }

  // Reuse drafts POST to enforce quota & redirect
  const fd = new FormData();
  fd.set("title", title);
  fd.set("content", content);
  const proxyReq = new Request(req.url, { method: "POST", body: fd, headers: req.headers });
  return createDraft(proxyReq);
}
